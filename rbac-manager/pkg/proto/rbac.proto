// protoc --go_out=rbac-manager/pkg/proto --go-grpc_out=rbac-manager/pkg/proto rbac-manager/pkg/proto/rbac.proto
syntax = "proto3";

package proto;

import "google/protobuf/empty.proto";

option go_package = "./";

service RbacService {
  rpc Check (RbacRequest) returns (RbacReply) {}
  rpc GetRoles (google.protobuf.Empty) returns (GetRolesReply) {}
  rpc GetRole (GetRoleRequest) returns (GetRoleReply) {}
  rpc PostRole (PostRoleRequest) returns (google.protobuf.Empty) {}
  rpc PostPolicy (PostPolicyRequest) returns (google.protobuf.Empty) {}

  rpc GetPolicy (GetPolicyRequest) returns (GetPolicyReply) {}
  rpc GetPolicies (google.protobuf.Empty) returns (GetPoliciesReply) {}
  rpc GetPolicyJson (GetPolicyJsonRequest) returns (GetPolicyJsonReply) {}

  rpc GetProjects (google.protobuf.Empty) returns (GetProjectsReply) {}
  rpc GetUsers (GetUsersRequest) returns (GetUsersReply) {}

  rpc PostUser (PostUserRequest) returns (google.protobuf.Empty) {}
  rpc PostProject (PostProjectRequest) returns (PostProjectReply) {}
  rpc PutUser (PutUserRequest) returns (PutUserReply) {}

  rpc GetDockerfiles (GetDockerfilesRequest) returns (GetDockerfilesReply) {}

  
  rpc PostDockerfile (PostDockerfileRequest) returns (google.protobuf.Empty) {}
  
  rpc GetTraceId (GetTraceIdRequest) returns (GetTraceIdReply) {}
  rpc GetTraceIdByDockerfileId (GetTraceIdByDockerfileIdRequest) returns (GetTraceIdByDockerfileIdReply) {}
}

enum Action {
  CREATE = 0;
  RETRIEVE = 1;
  UPDATE = 2;
  DELETE = 3;
}

enum Result {
  ASK = 0;
  ALLOW = 1;
  DENY = 2;
  ERROR = 3;
}

message GetTraceIdByDockerfileIdRequest {
  string dockerfile_id = 1;
}

message GetTraceIdByDockerfileIdReply {
  string trace_id = 1;
}


message GetTraceIdRequest {
  string image_name = 1;
  string image_version = 2;
}

message GetTraceIdReply {
  string trace_id = 1;
  string repository = 2;
}

message RbacRequest {
  string username = 1;
  string target = 2;
  Action action = 3;
}

message RbacReply {
  Result result  = 1;
}

message Role {
  string id = 1;
  string name = 2;
  string create_time = 3;
}

message PostProjectRequest {
  string projectName = 1;
  string creatorId = 2;
}

message PostProjectReply {}

message GetRolesRequest {}

message RolePolicy {
  Role role = 1;
  repeated Policy policy = 2;
}

message GetRolesReply {
  repeated RolePolicy rolePolicies = 1;
}

message GetRoleRequest {
  string user_name = 1;
}

message GetRoleReply {
  Role role = 1;
}

message Policy {
  string id = 1;
  string name = 2;
  string json = 3;
}

message GetPolicyRequest {
  string role_id = 1;
}

message GetPolicyReply {
  repeated Policy policies = 1;
}

message GetPoliciesReply {
  repeated Policy policies = 1;
}

message Project {
  string id = 1;
  string name = 2;
  string creator_id = 3;
}

message GetProjectsReply {
  repeated Project projects = 1;
}

message User {
  string id = 1;
  string name = 2;
  string role_id = 3;
  string create_time = 4;
}


message GetUsersRequest {
  string projectName = 2;
}

message GetUsersReply {
  repeated User users = 1;
}

message PostUserRequest {
  User user = 1;
  string projectName = 2;
}

message Error {
  string error = 1;
}

message PutUserRequest {
  string userId = 1;
  User user = 2;
}

message PutUserReply {
  Error error = 1;
}

message PostRoleRequest {
  string role_name = 1;
}

message Dockerfile {
  string id = 1;
  string image_name = 2;
  string image_version = 3;
  string creator_id = 4;
  string repository = 5;
  string content = 6;
  string trace_id = 7;
}

message GetDockerfilesRequest {
  string user_name = 1;
}

message GetDockerfilesReply {
  repeated Dockerfile dockerfiles = 1;
}

message PostDockerfileRequest {
  Dockerfile dockerfile = 1;
}

message PostPolicyRequest {
  Policy policy = 1;
}

message GetPolicyJsonRequest {
  string policy_id = 1;
}
message GetPolicyJsonReply {
  Policy policy = 1;
}