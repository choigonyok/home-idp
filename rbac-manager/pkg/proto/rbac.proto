// protoc --go_out=rbac-manager/pkg/proto --go-grpc_out=rbac-manager/pkg/proto rbac-manager/pkg/proto/rbac.proto
syntax = "proto3";

package proto;

import "google/protobuf/empty.proto";

option go_package = "./";

service RbacService {
  rpc DeleteRole (DeleteRoleRequest) returns (DeleteRoleReply) {}
  rpc GetRoles (GetRolesRequest) returns (GetRolesReply) {}
  rpc GetRole (GetRoleRequest) returns (GetRoleReply) {}
  rpc PostRole (PostRoleRequest) returns (PostRoleReply) {}
  rpc UpdateRole (UpdateRoleRequest) returns (UpdateRoleReply) {}
  
  
  rpc Check (RbacRequest) returns (RbacReply) {}
  
  rpc PostPolicy (PostPolicyRequest) returns (google.protobuf.Empty) {}
  
  rpc DeletePolicy (DeletePolicyRequest) returns (DeletePolicyReply) {}
  rpc DeleteProject (DeleteProjectRequest) returns (DeleteProjectReply) {}
  rpc DeleteUser (DeleteUserRequest) returns (DeleteUserReply) {}

  rpc GetPolicy (GetPolicyRequest) returns (GetPolicyReply) {}
  rpc UpdatePolicy (UpdatePolicyRequest) returns (UpdatePolicyReply) {}

  rpc GetPolicies (GetPoliciesRequest) returns (GetPoliciesReply) {}
  rpc GetPolicyJson (GetPolicyJsonRequest) returns (GetPolicyJsonReply) {}

  rpc GetProjects (GetProjectsRequest) returns (GetProjectsReply) {}
  rpc GetUsersInProject (GetUsersInProjectRequest) returns (GetUsersInProjectReply) {}
  rpc GetUsers (GetUsersRequest) returns (GetUsersReply) {}
  rpc IsUserExist (IsUserExistRequest) returns (IsUserExistReply) {}

  rpc PostUser (PostUserRequest) returns (google.protobuf.Empty) {}
  rpc UpdateUserRole (UpdateUserRoleRequest) returns (UpdateUserRoleReply) {}
  
  rpc PostProject (PostProjectRequest) returns (PostProjectReply) {}
  rpc PutUser (PutUserRequest) returns (PutUserReply) {}

  rpc GetDockerfiles (GetDockerfilesRequest) returns (GetDockerfilesReply) {}

  
  rpc PostDockerfile (PostDockerfileRequest) returns (google.protobuf.Empty) {}
  
  rpc GetTraceId (GetTraceIdRequest) returns (GetTraceIdReply) {}
  rpc GetTraceIdByDockerfileId (GetTraceIdByDockerfileIdRequest) returns (GetTraceIdByDockerfileIdReply) {}
}

enum Action {
  CREATE = 0;
  RETRIEVE = 1;
  UPDATE = 2;
  DELETE = 3;
}

enum Result {
  ASK = 0;
  ALLOW = 1;
  DENY = 2;
  ERROR = 3;
}

message GetTraceIdByDockerfileIdRequest {
  string dockerfile_id = 1;
}

message GetTraceIdByDockerfileIdReply {
  string trace_id = 1;
}


message GetTraceIdRequest {
  string image_name = 1;
  string image_version = 2;
}

message GetTraceIdReply {
  string trace_id = 1;
  string repository = 2;
}

message RbacRequest {
  string username = 1;
  string target = 2;
  Action action = 3;
}

message RbacReply {
  Result result  = 1;
}

message Role {
  string id = 1;
  string name = 2;
  string create_time = 3;
}

message PostProjectRequest {
  string projectName = 1;
  double creatorId = 2;
}

message PostProjectReply {}

message GetRolesRequest {
  double uid = 1;
}
message GetRolesReply {
  repeated RolePolicy rolePolicies = 1;
  Error error = 2;
}

message Error {
  int32 status_code = 1;
  string message = 2;
}

message RolePolicy {
  Role role = 1;
  repeated Policy policies = 2;
}


message GetRoleRequest {
  string user_name = 1;
}

message GetRoleReply {
  Role role = 1;
}

message Policy {
  string id = 1;
  string name = 2;
  string json = 3;
}

message GetPolicyRequest {
  string role_id = 1;
}

message GetPolicyReply {
  repeated Policy policies = 1;
}

message GetPoliciesRequest {
  double uid = 1;
}
message GetPoliciesReply {
  repeated Policy policies = 1;
  Error error = 2;
}


message Project {
  string id = 1;
  string name = 2;
  string creator_id = 3;
}

message GetProjectsRequest {
  double uid = 1 ;
}
message GetProjectsReply {
  repeated Project projects = 1;
  Error error = 2;
}

message User {
  double id = 1;
  string name = 2;
  string role_id = 3;
  string role_name = 4;
  string create_time = 7;
  string project_id = 8;
  string project_name = 9;
}


message GetUsersInProjectRequest {
  string projectName = 1;
}
message GetUsersInProjectReply {
  repeated User users = 1;
}

message GetUsersRequest {
  double uid = 1;
}
message GetUsersReply {
  repeated User users = 1;
  Error error = 2;
}


message PostUserRequest {
  User user = 1;
  string projectName = 2;
}

message PutUserRequest {
  string userId = 1;
  User user = 2;
}

message PutUserReply {
  Error error = 1;
}

message PostRoleRequest {
  Role role = 1;
  repeated Policy policies = 2;
  double uid = 3;
}
message PostRoleReply {
  Error error = 1;
}


message Dockerfile {
  string id = 1;
  string image_name = 2;
  string image_version = 3;
  double creator_id = 4;
  string repository = 5;
  string content = 6;
  string trace_id = 7;
}

message GetDockerfilesRequest {
  string user_name = 1;
}

message GetDockerfilesReply {
  repeated Dockerfile dockerfiles = 1;
}

message PostDockerfileRequest {
  Dockerfile dockerfile = 1;
}

message PostPolicyRequest {
  Policy policy = 1;
}

message GetPolicyJsonRequest {
  string policy_id = 1;
}
message GetPolicyJsonReply {
  Policy policy = 1;
}

message IsUserExistRequest {
  double user_id = 1;
}
message IsUserExistReply {
  bool found = 1;
}

message UpdateUserRoleRequest {
  double uid = 1;
  User user = 2;
  Role role = 3;
}
message UpdateUserRoleReply {
  Error error = 1;
}

message DeletePolicyRequest {
  double uid = 1;
  string policy_id = 2;
}
message DeletePolicyReply {
  Error error = 1;
}

message DeleteRoleRequest {
  double uid = 1;
  string role_id = 2;
}
message DeleteRoleReply {
  Error error = 1;
}

message DeleteProjectRequest {
  double uid = 1;
  string project_id = 2;
}
message DeleteProjectReply {
  Error error = 1;
}

message DeleteUserRequest {
  double uid = 1;
  double user_id = 2;
}
message DeleteUserReply {
  Error error = 1;
}

message UpdatePolicyRequest {
  double uid = 1;
  Policy policy = 2;
}
message UpdatePolicyReply {
  Error error = 1;
}

message UpdateRoleRequest {
  double uid = 1;
  RolePolicy role = 2;
}
message UpdateRoleReply {
  Error error = 1;
}




// {
//   "policy": {
//     "effect": "Allow",
//     "target": "roles",
//     "action": "CREATE",
//   }
// }
