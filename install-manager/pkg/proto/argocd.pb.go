// protoc --go_out=rbac-manager/pkg/proto --go-grpc_out=rbac-manager/pkg/proto rbac-manager/pkg/proto/rbac.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.1
// source: install-manager/pkg/proto/argocd.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Option struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedisHa            bool                  `protobuf:"varint,1,opt,name=redis_ha,json=redisHa,proto3" json:"redis_ha,omitempty"`
	ControllerRepl     int32                 `protobuf:"varint,2,opt,name=controller_repl,json=controllerRepl,proto3" json:"controller_repl,omitempty"`
	ServerRepl         int32                 `protobuf:"varint,3,opt,name=server_repl,json=serverRepl,proto3" json:"server_repl,omitempty"`
	RepoServerRepl     int32                 `protobuf:"varint,4,opt,name=repo_server_repl,json=repoServerRepl,proto3" json:"repo_server_repl,omitempty"`
	ApplicationSetRepl int32                 `protobuf:"varint,5,opt,name=application_set_repl,json=applicationSetRepl,proto3" json:"application_set_repl,omitempty"`
	Domain             string                `protobuf:"bytes,6,opt,name=domain,proto3" json:"domain,omitempty"`
	Ingress            *Option_OptionIngress `protobuf:"bytes,7,opt,name=ingress,proto3" json:"ingress,omitempty"`
	Argocd             *Option_ArgoCD        `protobuf:"bytes,8,opt,name=argocd,proto3" json:"argocd,omitempty"`
}

func (x *Option) Reset() {
	*x = Option{}
	if protoimpl.UnsafeEnabled {
		mi := &file_install_manager_pkg_proto_argocd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Option) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Option) ProtoMessage() {}

func (x *Option) ProtoReflect() protoreflect.Message {
	mi := &file_install_manager_pkg_proto_argocd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Option.ProtoReflect.Descriptor instead.
func (*Option) Descriptor() ([]byte, []int) {
	return file_install_manager_pkg_proto_argocd_proto_rawDescGZIP(), []int{0}
}

func (x *Option) GetRedisHa() bool {
	if x != nil {
		return x.RedisHa
	}
	return false
}

func (x *Option) GetControllerRepl() int32 {
	if x != nil {
		return x.ControllerRepl
	}
	return 0
}

func (x *Option) GetServerRepl() int32 {
	if x != nil {
		return x.ServerRepl
	}
	return 0
}

func (x *Option) GetRepoServerRepl() int32 {
	if x != nil {
		return x.RepoServerRepl
	}
	return 0
}

func (x *Option) GetApplicationSetRepl() int32 {
	if x != nil {
		return x.ApplicationSetRepl
	}
	return 0
}

func (x *Option) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Option) GetIngress() *Option_OptionIngress {
	if x != nil {
		return x.Ingress
	}
	return nil
}

func (x *Option) GetArgocd() *Option_ArgoCD {
	if x != nil {
		return x.Argocd
	}
	return nil
}

type InstallArgoCDChartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opt *Option `protobuf:"bytes,1,opt,name=opt,proto3" json:"opt,omitempty"`
}

func (x *InstallArgoCDChartRequest) Reset() {
	*x = InstallArgoCDChartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_install_manager_pkg_proto_argocd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallArgoCDChartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallArgoCDChartRequest) ProtoMessage() {}

func (x *InstallArgoCDChartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_install_manager_pkg_proto_argocd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallArgoCDChartRequest.ProtoReflect.Descriptor instead.
func (*InstallArgoCDChartRequest) Descriptor() ([]byte, []int) {
	return file_install_manager_pkg_proto_argocd_proto_rawDescGZIP(), []int{1}
}

func (x *InstallArgoCDChartRequest) GetOpt() *Option {
	if x != nil {
		return x.Opt
	}
	return nil
}

type InstallArgoCDChartReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
}

func (x *InstallArgoCDChartReply) Reset() {
	*x = InstallArgoCDChartReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_install_manager_pkg_proto_argocd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallArgoCDChartReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallArgoCDChartReply) ProtoMessage() {}

func (x *InstallArgoCDChartReply) ProtoReflect() protoreflect.Message {
	mi := &file_install_manager_pkg_proto_argocd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallArgoCDChartReply.ProtoReflect.Descriptor instead.
func (*InstallArgoCDChartReply) Descriptor() ([]byte, []int) {
	return file_install_manager_pkg_proto_argocd_proto_rawDescGZIP(), []int{2}
}

func (x *InstallArgoCDChartReply) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

type UninstallArgoCDChartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UninstallArgoCDChartRequest) Reset() {
	*x = UninstallArgoCDChartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_install_manager_pkg_proto_argocd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UninstallArgoCDChartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UninstallArgoCDChartRequest) ProtoMessage() {}

func (x *UninstallArgoCDChartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_install_manager_pkg_proto_argocd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UninstallArgoCDChartRequest.ProtoReflect.Descriptor instead.
func (*UninstallArgoCDChartRequest) Descriptor() ([]byte, []int) {
	return file_install_manager_pkg_proto_argocd_proto_rawDescGZIP(), []int{3}
}

type UninstallArgoCDChartReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
}

func (x *UninstallArgoCDChartReply) Reset() {
	*x = UninstallArgoCDChartReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_install_manager_pkg_proto_argocd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UninstallArgoCDChartReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UninstallArgoCDChartReply) ProtoMessage() {}

func (x *UninstallArgoCDChartReply) ProtoReflect() protoreflect.Message {
	mi := &file_install_manager_pkg_proto_argocd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UninstallArgoCDChartReply.ProtoReflect.Descriptor instead.
func (*UninstallArgoCDChartReply) Descriptor() ([]byte, []int) {
	return file_install_manager_pkg_proto_argocd_proto_rawDescGZIP(), []int{4}
}

func (x *UninstallArgoCDChartReply) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

type Option_OptionIngress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled    bool              `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ClassName  string            `protobuf:"bytes,2,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	Tls        bool              `protobuf:"varint,3,opt,name=tls,proto3" json:"tls,omitempty"`
	Annotation map[string]string `protobuf:"bytes,4,rep,name=annotation,proto3" json:"annotation,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Option_OptionIngress) Reset() {
	*x = Option_OptionIngress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_install_manager_pkg_proto_argocd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Option_OptionIngress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Option_OptionIngress) ProtoMessage() {}

func (x *Option_OptionIngress) ProtoReflect() protoreflect.Message {
	mi := &file_install_manager_pkg_proto_argocd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Option_OptionIngress.ProtoReflect.Descriptor instead.
func (*Option_OptionIngress) Descriptor() ([]byte, []int) {
	return file_install_manager_pkg_proto_argocd_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Option_OptionIngress) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Option_OptionIngress) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *Option_OptionIngress) GetTls() bool {
	if x != nil {
		return x.Tls
	}
	return false
}

func (x *Option_OptionIngress) GetAnnotation() map[string]string {
	if x != nil {
		return x.Annotation
	}
	return nil
}

type Option_ArgoCD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace   string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ReleaseName string `protobuf:"bytes,2,opt,name=release_name,json=releaseName,proto3" json:"release_name,omitempty"`
}

func (x *Option_ArgoCD) Reset() {
	*x = Option_ArgoCD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_install_manager_pkg_proto_argocd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Option_ArgoCD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Option_ArgoCD) ProtoMessage() {}

func (x *Option_ArgoCD) ProtoReflect() protoreflect.Message {
	mi := &file_install_manager_pkg_proto_argocd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Option_ArgoCD.ProtoReflect.Descriptor instead.
func (*Option_ArgoCD) Descriptor() ([]byte, []int) {
	return file_install_manager_pkg_proto_argocd_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Option_ArgoCD) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Option_ArgoCD) GetReleaseName() string {
	if x != nil {
		return x.ReleaseName
	}
	return ""
}

var File_install_manager_pkg_proto_argocd_proto protoreflect.FileDescriptor

var file_install_manager_pkg_proto_argocd_proto_rawDesc = []byte{
	0x0a, 0x26, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x72, 0x67, 0x6f,
	0x63, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xfa, 0x04, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65,
	0x64, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65,
	0x64, 0x69, 0x73, 0x48, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x12,
	0x28, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x61, 0x72,
	0x67, 0x6f, 0x63, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44,
	0x52, 0x06, 0x61, 0x72, 0x67, 0x6f, 0x63, 0x64, 0x1a, 0xe6, 0x01, 0x0a, 0x0d, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x74, 0x6c, 0x73, 0x12, 0x4b, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x49, 0x0a, 0x06, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3c, 0x0a, 0x19,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x03, 0x6f, 0x70, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x6f, 0x70, 0x74, 0x22, 0x33, 0x0a, 0x17, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x22,
	0x1d, 0x0a, 0x1b, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x67, 0x6f,
	0x43, 0x44, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x35,
	0x0a, 0x19, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x67, 0x6f, 0x43,
	0x44, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0x32, 0xc2, 0x01, 0x0a, 0x06, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44,
	0x12, 0x58, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x67, 0x6f, 0x43,
	0x44, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x14, 0x55, 0x6e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_install_manager_pkg_proto_argocd_proto_rawDescOnce sync.Once
	file_install_manager_pkg_proto_argocd_proto_rawDescData = file_install_manager_pkg_proto_argocd_proto_rawDesc
)

func file_install_manager_pkg_proto_argocd_proto_rawDescGZIP() []byte {
	file_install_manager_pkg_proto_argocd_proto_rawDescOnce.Do(func() {
		file_install_manager_pkg_proto_argocd_proto_rawDescData = protoimpl.X.CompressGZIP(file_install_manager_pkg_proto_argocd_proto_rawDescData)
	})
	return file_install_manager_pkg_proto_argocd_proto_rawDescData
}

var file_install_manager_pkg_proto_argocd_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_install_manager_pkg_proto_argocd_proto_goTypes = []any{
	(*Option)(nil),                      // 0: proto.Option
	(*InstallArgoCDChartRequest)(nil),   // 1: proto.InstallArgoCDChartRequest
	(*InstallArgoCDChartReply)(nil),     // 2: proto.InstallArgoCDChartReply
	(*UninstallArgoCDChartRequest)(nil), // 3: proto.UninstallArgoCDChartRequest
	(*UninstallArgoCDChartReply)(nil),   // 4: proto.UninstallArgoCDChartReply
	(*Option_OptionIngress)(nil),        // 5: proto.Option.OptionIngress
	(*Option_ArgoCD)(nil),               // 6: proto.Option.ArgoCD
	nil,                                 // 7: proto.Option.OptionIngress.AnnotationEntry
}
var file_install_manager_pkg_proto_argocd_proto_depIdxs = []int32{
	5, // 0: proto.Option.ingress:type_name -> proto.Option.OptionIngress
	6, // 1: proto.Option.argocd:type_name -> proto.Option.ArgoCD
	0, // 2: proto.InstallArgoCDChartRequest.opt:type_name -> proto.Option
	7, // 3: proto.Option.OptionIngress.annotation:type_name -> proto.Option.OptionIngress.AnnotationEntry
	1, // 4: proto.ArgoCD.InstallArgoCDChart:input_type -> proto.InstallArgoCDChartRequest
	3, // 5: proto.ArgoCD.UninstallArgoCDChart:input_type -> proto.UninstallArgoCDChartRequest
	2, // 6: proto.ArgoCD.InstallArgoCDChart:output_type -> proto.InstallArgoCDChartReply
	4, // 7: proto.ArgoCD.UninstallArgoCDChart:output_type -> proto.UninstallArgoCDChartReply
	6, // [6:8] is the sub-list for method output_type
	4, // [4:6] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_install_manager_pkg_proto_argocd_proto_init() }
func file_install_manager_pkg_proto_argocd_proto_init() {
	if File_install_manager_pkg_proto_argocd_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_install_manager_pkg_proto_argocd_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Option); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_install_manager_pkg_proto_argocd_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*InstallArgoCDChartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_install_manager_pkg_proto_argocd_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*InstallArgoCDChartReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_install_manager_pkg_proto_argocd_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*UninstallArgoCDChartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_install_manager_pkg_proto_argocd_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*UninstallArgoCDChartReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_install_manager_pkg_proto_argocd_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Option_OptionIngress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_install_manager_pkg_proto_argocd_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Option_ArgoCD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_install_manager_pkg_proto_argocd_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_install_manager_pkg_proto_argocd_proto_goTypes,
		DependencyIndexes: file_install_manager_pkg_proto_argocd_proto_depIdxs,
		MessageInfos:      file_install_manager_pkg_proto_argocd_proto_msgTypes,
	}.Build()
	File_install_manager_pkg_proto_argocd_proto = out.File
	file_install_manager_pkg_proto_argocd_proto_rawDesc = nil
	file_install_manager_pkg_proto_argocd_proto_goTypes = nil
	file_install_manager_pkg_proto_argocd_proto_depIdxs = nil
}
